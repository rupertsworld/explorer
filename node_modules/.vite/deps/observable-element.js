// node_modules/observable-element/src/index.js
var ObservableElement = class extends HTMLElement {
  observe(properties, callback) {
    const props = properties;
    this._callbacks = {};
    this._connected = false;
    const canBeReflected = (value) => {
      return ["string", "number"].includes(typeof value);
    };
    const setProp = (name, value) => {
      if (this.propertyChangedCallback) {
        this.propertyChangedCallback(name, getProp(name), value);
      }
      this["_observable_" + name] = value;
      reflectPropToAttributes(name, value);
      if (this._connected)
        this._callbacks[name]();
    };
    const getProp = (prop) => {
      return this["_observable_" + prop];
    };
    const reflectPropToAttributes = (prop, value) => {
      if (canBeReflected(value)) {
        this.setAttribute(prop, value);
      } else {
        this.removeAttribute(prop);
      }
    };
    props.forEach((prop) => {
      this._callbacks[prop] = callback.bind(this);
      if (this[prop]) {
        setProp(prop, this[prop]);
      } else if (this.getAttribute(prop) !== null) {
        setProp(prop, this.getAttribute(prop));
      }
    });
    props.forEach((prop) => {
      Object.defineProperty(this, prop, {
        get() {
          return getProp(prop);
        },
        set(value) {
          setProp(prop, value);
        }
      });
    });
    const observer = new MutationObserver((mutationsList) => {
      mutationsList.forEach((mutation) => {
        if (mutation.type === "attributes") {
          const name = mutation.attributeName;
          const attribute = this.getAttribute(name);
          const prop = getProp(name);
          if (attribute === prop || typeof prop === "number" && attribute === prop.toString() || !canBeReflected(prop) && attribute === null) {
            return;
          }
          if (this.attributeChangedCallback) {
            this.attributeChangedCallback(name, prop, attribute);
          } else {
            setProp(name, attribute, true);
          }
        } else if (mutation.type === "childList" && mutation.addedNodes.length > 0) {
          this._connected = true;
          props.forEach((prop) => {
            if (this[prop] !== void 0)
              this._callbacks[prop]();
          });
        }
      });
    });
    observer.observe(this, { attributes: true, childList: true });
  }
};
export {
  ObservableElement
};
//# sourceMappingURL=observable-element.js.map
